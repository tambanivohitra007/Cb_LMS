datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  name        String?
  password    String
  role        String    @default("STUDENT") // STUDENT, TEACHER, ADMIN
  photo       String?
  classes     Class[]   @relation("ClassStudents")
  taughtClasses Class[]   @relation("TeacherClasses")
  cohorts     Cohort[]  @relation("TeacherCohorts")
  submissions Submission[]
  competencyProgress CompetencyProgress[] @relation("StudentCompetencies")
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
}

model Cohort {
  id          Int       @id @default(autoincrement())
  name        String    @unique // e.g., "Elementary", "Middle School", "High School"
  description String?
  level       Int       @default(1) // 1 = Elementary, 2 = Middle, 3 = High School, etc.
  teacherId   Int
  teacher     User      @relation("TeacherCohorts", fields: [teacherId], references: [id])
  classes     Class[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
}

model Class {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  teacherId   Int
  teacher     User      @relation("TeacherClasses", fields: [teacherId], references: [id])
  cohortId    Int?      // Optional cohort assignment
  cohort      Cohort?   @relation(fields: [cohortId], references: [id])
  students    User[]    @relation("ClassStudents")
  assignments Assignment[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
}

model Assignment {
  id           Int          @id @default(autoincrement())
  title        String
  description  String?
  classId      Int
  class        Class        @relation(fields: [classId], references: [id])
  competencies Competency[]
  submissions  Submission[]
  deadline     DateTime?    // Optional deadline for the assignment
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  deleted_at   DateTime?
}

model Competency {
  id           Int        @id @default(autoincrement())
  name         String
  description  String?
  assignmentId Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  progress     CompetencyProgress[]
  created_at   DateTime   @default(now())
}

model CompetencyProgress {
  id           Int        @id @default(autoincrement())
  competencyId Int
  competency   Competency @relation(fields: [competencyId], references: [id])
  studentId    Int
  student      User       @relation("StudentCompetencies", fields: [studentId], references: [id])
  status       String     @default("NOT_STARTED") // NOT_STARTED, IN_PROGRESS, ACHIEVED, MASTERED
  submissionId Int?       // Optional link to the submission that achieved this competency
  submission   Submission? @relation(fields: [submissionId], references: [id])
  achieved_at  DateTime?  // When the competency was achieved/mastered
  feedback     String?    // Teacher feedback on this specific competency
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt

  @@unique([competencyId, studentId])
}

model Submission {
  id           Int      @id @default(autoincrement())
  content      String?  // Could be a link to a file, or text content
  status       String   @default("IN_PROGRESS") // IN_PROGRESS, ACHIEVED, MASTERED
  studentId    Int
  student      User     @relation(fields: [studentId], references: [id])
  assignmentId Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  competencyProgress CompetencyProgress[]
  submitted_at DateTime @default(now())
  reviewed_at  DateTime?
  feedback     String?   // Teacher's feedback on the submission
  feedback_at  DateTime? // When the feedback was given
}

